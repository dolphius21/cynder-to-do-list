import { useState } from 'react';
import Link from 'next/link';
import Head from 'next/head';
import { parseISO } from 'date-fns';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import Header from '../../components/Header';
import fakeTodos from '../../services/fakeTodosService';
import Button from '../../components/Button';

export const getStaticPaths = async () => {
  const data = await new Promise((res, rej) => {
    setTimeout(() => {
      res(fakeTodos);
    });
  }, 500);

  const paths = data.map((todo) => {
    return {
      params: { id: todo._id },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async (context) => {
  const id = context.params.id;
  const details = await new Promise((res, rej) => {
    setTimeout(() => {
      const result = fakeTodos.find((todo) => todo._id === id);
      res(result);
    }, 500);
  });

  return {
    props: { details },
  };
};

const TodoDetails = ({ details }) => {
  const [title, setTitle] = useState(details.title);
  const [description, setDescription] = useState(details.description);
  const [dueDate, setDueDate] = useState(parseISO(details.dueDate));

  const overdue = details.dueDate < new Date().toISOString();

  return (
    <div className="container">
      <Head>
        <title>To-do List App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="card">
        <div className="todo-form">
          <Link href="/">
            <a>Back to todo list...</a>
          </Link>
          <input
            type="text"
            className="todo-form-title"
            onChange={(e) => setTitle(e.target.value)}
            value={title}
            required
          />
          <div
            className={`todo-form-status ${
              details.isComplete
                ? 'todo-form-status-complete'
                : !details.isComplete && !overdue
                ? 'todo-form-status-incomplete'
                : !details.isComplete && overdue
                ? 'todo-form-status-overdue'
                : ''
            }`}
          >
            <p>
              {details.isComplete && !overdue
                ? 'Complete'
                : !details.isComplete && !overdue
                ? 'Incomplete'
                : !details.isComplete && overdue
                ? 'Overdue'
                : ''}
            </p>
          </div>
          <div className="todo-form-due-date">
            <p>Due date:</p>
            <DatePicker
              className="todo-form-due-date-picker"
              selected={dueDate}
              onChange={(date) => setDueDate(date)}
            />
            {overdue && <p>Overdue</p>}
          </div>
          <div className="todo-form-description">
            <textarea
              rows="3"
              placeholder="todo description..."
              onChange={(e) => setDescription(e.target.value)}
              value={description}
            ></textarea>
          </div>
          <div className="form-div">
            <Button className="default-btn light-primary-btn" type="submit">
              Save Todo
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TodoDetails;
