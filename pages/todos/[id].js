import { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import Head from 'next/head';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import Header from '../../components/Header';
import Button from '../../components/Button';
import { getTodoById, getTodos, updateTodoById } from '../api/todos';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export const getStaticPaths = async () => {
  const { data } = await getTodos();

  const paths = data.map((todo) => {
    return {
      params: { id: `${todo.id}` },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async (context) => {
  const id = context.params.id;
  let data = {};
  let error = {};
  try {
    const res = await getTodoById(id);
    data = res.data;
  } catch (e) {
    error = e;
  }
  return {
    props: { details: data, error },
  };
};

const [updatingIds, setUpdatingIds] = useState([]);

const TodoDetails = ({ details }) => {
  const [values, setValues] = useState({
    id: details.id,
    title: details.title,
    description: details.description,
    due_date: new Date(details.due_date),
  });

  const router = useRouter();

  const { title, description, due_date } = values;

  const setFieldValue = (field, value) =>
    setValues({ ...values, [field]: value });

  const handleTodoUpdate = (e) => {
    e.preventDefault();
    console.log('request body =========>', values);
    updateTodoById(values.id, {
      title,
      description,
      due_date,
    }).then((res) => {
      toast('Todo successfully updated!', {
        position: 'top-center',
        autoClose: 2000,
      });
    });
    router.push('/');
  };

  const overdue = due_date < new Date().toISOString();

  return (
    <div className="container">
      <Head>
        <title>To-do List App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer />
      <Header />
      <div className="card">
        <form className="todo-form" onSubmit={handleTodoUpdate}>
          <Link href="/">
            <a>Back to todo list...</a>
          </Link>
          <input
            type="text"
            className="todo-form-title"
            onChange={(e) => setFieldValue('title', e.target.value)}
            value={title}
            required
          />
          <div
            className={`todo-form-status ${
              details.isComplete
                ? 'todo-form-status-complete'
                : !details.isComplete && !overdue
                ? 'todo-form-status-incomplete'
                : !details.isComplete && overdue
                ? 'todo-form-status-overdue'
                : ''
            }`}
          >
            <p>
              {details.isComplete && !overdue
                ? 'Complete'
                : !details.isComplete && !overdue
                ? 'Incomplete'
                : !details.isComplete && overdue
                ? 'Overdue'
                : ''}
            </p>
          </div>
          <div className="todo-form-due-date">
            <p>Due date:</p>
            <DatePicker
              className="todo-form-due-date-picker"
              selected={due_date}
              onChange={(date) => setFieldValue('due_date', date)}
            />
            {overdue && <p>Overdue</p>}
          </div>
          <div className="todo-form-description">
            <textarea
              rows="3"
              placeholder="todo description..."
              onChange={(e) => setFieldValue('description', e.target.value)}
              value={description}
            ></textarea>
          </div>
          <div className="form-div">
            <Button className="default-btn light-primary-btn" type="submit">
              Save Todo
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default TodoDetails;
